apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentbit-config
  namespace: logging
  labels:
    k8s-app: fluentbit
data:
  # Configuration files: server, input, filters and output
  # ======================================================
  fluent-bit.conf: |
    [SERVICE]
        Flush         1
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020

    @INCLUDE input-kubernetes.conf
    @INCLUDE filter-kubernetes.conf
    @INCLUDE output-elasticsearch.conf

  input-kubernetes.conf: |
    [INPUT]
        Name              tail
        Tag               java.*
        Path              /var/log/containers/java*.log
        DB                /var/log/flb_kube.db
        Mem_Buf_Limit     10MB
        Skip_Long_Lines   On
        Multiline         On
        Multiline_Flush   5
        Parser_Firstline  multiline        

  filter-kubernetes.conf: |
    [FILTER]
        Name                lua
        Match               java.*
        script              /fluent-bit/etc/multiline.lua
        call                process
        
    [FILTER]
        Name                kubernetes
        Match               java.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     java.var.log.containers.
        K8S-Logging.Parser  On        
        
    [FILTER]
        Name                parser
        Match               java.*
        Key_Name            log
        Parser              java_time_parser  
        Reserve_Data        On
        Preserve_Key        On          
        
  output-elasticsearch.conf: |
    [OUTPUT]
        Name              es
        Match             java.*
        Host              ${FLUENT_ELASTICSEARCH_HOST}
        Port              ${FLUENT_ELASTICSEARCH_PORT}
        Logstash_Format   On
        Retry_Limit       1
        Trace_Error       On
        Trace_Output      Off

  parsers.conf: |      
    [PARSER]
        Name        multiline
        Format      regex
        Regex       ^.*log":"(?<log>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}(?:(\\")|[^"]){9}(?:(\\")|[^"])*)

    [PARSER]
        Name        java_time_parser
        Format      regex
        Regex       ^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}).*$
        Time_Key    time
        Time_Format %Y-%m-%d %H:%M:%S.%L              

  multiline.lua: |
    JSON = require("/fluent-bit/etc/json")
    local function merge_log(record)
      if record["log"] then      
        local jsonEndCharacter = "}"
        local first = true
        local buffer = {}
        for jsonString in record["log"]:gmatch("[^}\n]+") do
            if not (jsonString:match("^.*}$")) then
                jsonString = jsonString..jsonEndCharacter
            end            
            local success, jsonLog = pcall(JSON.parse, jsonString)
            if success then
                if (first == true) then
                    record["stream"] = jsonLog["stream"]
                    record["time"] = jsonLog["time"]
                    first = false
                end
                local result = string.gsub(jsonLog["log"], "u0009", "    ")
                table.insert(buffer, result)
            else
                table.insert(buffer, jsonString)
            end
        end      
        record["log"] = table.concat(buffer, "")
      end
      return record
    end
    function process(tag, timestamp, record)
      return 1, timestamp, merge_log(record)
    end    
    
  json.lua: |
    local json = {}
    -- Internal functions.
    local function kind_of(obj)
      if type(obj) ~= 'table' then return type(obj) end
      local i = 1
      for _ in pairs(obj) do
        if obj[i] ~= nil then i = i + 1 else return 'table' end
      end
      if i == 1 then return 'table' else return 'array' end
    end
    local function escape_str(s)
      local in_char  = {'\\', '"', '/', '\b', '\f', '\n', '\r', '\t'}
      local out_char = {'\\', '"', '/',  'b',  'f',  'n',  'r',  't'}
      for i, c in ipairs(in_char) do
        s = s:gsub(c, '\\' .. out_char[i])
      end
      return s
    end
    -- Returns pos, did_find; there are two cases:
    -- 1. Delimiter found: pos = pos after leading space + delim; did_find = true.
    -- 2. Delimiter not found: pos = pos after leading space;     did_find = false.
    -- This throws an error if err_if_missing is true and the delim is not found.
    local function skip_delim(str, pos, delim, err_if_missing)
      pos = pos + #str:match('^%s*', pos)
      if str:sub(pos, pos) ~= delim then
        if err_if_missing then
          error('Expected ' .. delim .. ' near position ' .. pos)
        end
        return pos, false
      end
      return pos + 1, true
    end
    -- Expects the given pos to be the first character after the opening quote.
    -- Returns val, pos; the returned pos is after the closing quote character.
    local function parse_str_val(str, pos, val)
      val = val or ''
      local early_end_error = 'End of input found while parsing string.'
      if pos > #str then error(early_end_error) end
      local c = str:sub(pos, pos)
      if c == '"'  then return val, pos + 1 end
      if c ~= '\\' then return parse_str_val(str, pos + 1, val .. c) end
      -- We must have a \ character.
      local esc_map = {b = '\b', f = '\f', n = '\n', r = '\r', t = '\t'}
      local nextc = str:sub(pos + 1, pos + 1)
      if not nextc then error(early_end_error) end
      return parse_str_val(str, pos + 2, val .. (esc_map[nextc] or nextc))
    end
    -- Returns val, pos; the returned pos is after the number's final character.
    local function parse_num_val(str, pos)
      local num_str = str:match('^-?%d+%.?%d*[eE]?[+-]?%d*', pos)
      local val = tonumber(num_str)
      if not val then error('Error parsing number at position ' .. pos .. '.') end
      return val, pos + #num_str
    end
    -- Public values and functions.
    function json.stringify(obj, as_key)
      local s = {}  -- We'll build the string as an array of strings to be concatenated.
      local kind = kind_of(obj)  -- This is 'array' if it's an array or type(obj) otherwise.
      if kind == 'array' then
        if as_key then error('Can\'t encode array as key.') end
        s[#s + 1] = '['
        for i, val in ipairs(obj) do
          if i > 1 then s[#s + 1] = ', ' end
          s[#s + 1] = json.stringify(val)
        end
        s[#s + 1] = ']'
      elseif kind == 'table' then
        if as_key then error('Can\'t encode table as key.') end
        s[#s + 1] = '{'
        for k, v in pairs(obj) do
          if #s > 1 then s[#s + 1] = ', ' end
          s[#s + 1] = json.stringify(k, true)
          s[#s + 1] = ':'
          s[#s + 1] = json.stringify(v)
        end
        s[#s + 1] = '}'
      elseif kind == 'string' then
        return '"' .. escape_str(obj) .. '"'
      elseif kind == 'number' then
        if as_key then return '"' .. tostring(obj) .. '"' end
        return tostring(obj)
      elseif kind == 'boolean' then
        return tostring(obj)
      elseif kind == 'nil' then
        return 'null'
      else
        error('Unjsonifiable type: ' .. kind .. '.')
      end
      return table.concat(s)
    end
    json.null = {}  -- This is a one-off table to represent the null value.
    function json.parse(str, pos, end_delim)
      pos = pos or 1
      if pos > #str then error('Reached unexpected end of input.') end
      local pos = pos + #str:match('^%s*', pos)  -- Skip whitespace.
      local first = str:sub(pos, pos)
      if first == '{' then  -- Parse an object.
        local obj, key, delim_found = {}, true, true
        pos = pos + 1
        while true do
          key, pos = json.parse(str, pos, '}')
          if key == nil then return obj, pos end
          if not delim_found then error('Comma missing between object items.') end
          pos = skip_delim(str, pos, ':', true)  -- true -> error if missing.
          obj[key], pos = json.parse(str, pos)
          pos, delim_found = skip_delim(str, pos, ',')
        end
      elseif first == '[' then  -- Parse an array.
        local arr, val, delim_found = {}, true, true
        pos = pos + 1
        while true do
          val, pos = json.parse(str, pos, ']')
          if val == nil then return arr, pos end
          if not delim_found then error('Comma missing between array items.') end
          arr[#arr + 1] = val
          pos, delim_found = skip_delim(str, pos, ',')
        end
      elseif first == '"' then  -- Parse a string.
        return parse_str_val(str, pos + 1)
      elseif first == '-' or first:match('%d') then  -- Parse a number.
        return parse_num_val(str, pos)
      elseif first == end_delim then  -- End of an object or array.
        return nil, pos + 1
      else  -- Parse true, false, or null.
        local literals = {['true'] = true, ['false'] = false, ['null'] = json.null}
        for lit_str, lit_val in pairs(literals) do
          local lit_end = pos + #lit_str - 1
          if str:sub(pos, lit_end) == lit_str then return lit_val, lit_end + 1 end
        end
        local pos_info_str = 'position ' .. pos .. ': ' .. str:sub(pos, pos + 10)
        error('Invalid json syntax starting at ' .. pos_info_str)
      end
    end
    return json